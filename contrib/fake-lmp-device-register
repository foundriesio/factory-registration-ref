#!/usr/bin/python3

from argparse import ArgumentParser
import os
import subprocess
import sys
from tempfile import NamedTemporaryFile
from typing import NamedTuple, Tuple
from uuid import uuid4

import requests
import logging

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.DEBUG)
log = logging.getLogger(__name__)


class Options(NamedTuple):
    factory: str
    sota_dir: str
    tags: str
    apps: str
    hwid: str
    uuid: str
    name: str
    registration_url: str
    production: bool


def create_key(uuid: str, factory: str, production: bool, sota_dir: str) -> bytes:
    log.info("Setting path for the private key file: %s", sota_dir)
    keyfile_path = os.path.join(sota_dir, "pkey.pem")

    log.info("Creating key for UUID: %s, Factory: %s", uuid, factory)
    subprocess.check_call(
        ["openssl", "ecparam", "-genkey", "-name", "prime256v1", "-out", keyfile_path]
    )

    log.info("Creating CSR for UUID: %s, Factory: %s", uuid, factory)
    with NamedTemporaryFile() as cnf:
        cnf.write(
            f"""[req]
prompt = no
distinguished_name = dn
req_extensions = ext

[dn]
CN={uuid}
OU={factory}
""".encode()
        )
        if production:
            cnf.write(b"businessCategory=production\n")
        cnf.write(
            b"""
[ext]
keyUsage=critical, digitalSignature
extendedKeyUsage=critical, clientAuth
"""
        )
        cnf.flush()

        r = subprocess.run(
            ["openssl", "req", "-new", "-config", cnf.name, "-key", keyfile_path],
            stdout=subprocess.PIPE,
        )
        r.check_returncode()

    return r.stdout


def main(opts: Options):
    log.info("Creating key and CSR")
    csr = create_key(opts.uuid, opts.factory, opts.production, opts.sota_dir)
    data = {
        "name": opts.name,
        "uuid": opts.uuid,
        "csr": csr.decode(),
        "hardware-id": opts.hwid,
        "sota-config-dir": opts.sota_dir,
        "overrides": {
            "pacman": {
                "type": '"ostree+compose_apps"',
                "tags": '"' + opts.tags + '"',
                "compose_apps_root": os.path.join(opts.sota_dir, "compose-apps"),
            },
        },
    }

    if opts.apps:
        data["overrides"]["pacman"]["compose_apps"] = '"' + opts.apps + '"'  # type: ignore

    r = requests.post(opts.registration_url, json=data)
    r.raise_for_status()
    log.debug("Successfully registered device with status code: %d", r.status_code)
        
    for k, v in r.json().items():
        with open(os.path.join(opts.sota_dir, k), mode="w") as f:  # type: ignore
            f.write(v)

    with open(os.path.join(opts.sota_dir, "curl"), "wb") as f:
        os.fchmod(f.fileno(), 0o755)
        f.write(
            f"""#!/bin/sh -e
cd {opts.sota_dir}
curl --cert client.pem --key pkey.pem --cacert root.crt $*""".encode()
        )


def get_parser() -> ArgumentParser:
    p = ArgumentParser(description="Example client to ease local testing")
    p.add_argument(
        "--factory", "-f", required=True, help="Name of factory to register device in"
    )
    p.add_argument("--production", action="store_true", help="Make 'production' cert")
    p.add_argument("--sota-dir", "-d", default=os.path.join(os.getcwd(), "var", "sota"), help="default=%(default)s")
    p.add_argument("--tags", "-t", default="master", help="default=%(default)s")
    p.add_argument("--apps", "-a")
    p.add_argument(
        "--hwid", "-i", default="intel-corei7-64", help="default=%(default)s"
    )
    p.add_argument("--uuid", "-u", help="Default value is a random uuid")
    p.add_argument("--name", "-n", help="Default value is the uuid")
    p.add_argument(
        "--registration-url",
        "-r",
        default="http://localhost:80/sign",
        help="factory-registration-ref url. default=%(default)s",
    )
    return p


if __name__ == "__main__":
    args = get_parser().parse_args()
    if not args.uuid:
        args.uuid = str(uuid4())
    if not args.name:
        args.name = args.uuid
    args.sota_dir = os.path.abspath(args.sota_dir)

    options = Options(
        factory=args.factory,
        sota_dir=args.sota_dir,
        tags=args.tags,
        apps=args.apps,
        hwid=args.hwid,
        uuid=args.uuid,
        name=args.name,
        registration_url=args.registration_url,
        production=args.production,
    )
    main(options)
